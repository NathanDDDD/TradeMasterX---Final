# TradeMasterX 2.0 Docker Compose Configuration
# Production-ready containerized deployment with supporting services

version: '3.8'

# ============================================================================
# SERVICES CONFIGURATION
# ============================================================================
services:
  
  # Main TradeMasterX Application
  trademasterx:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-2.0.0}
        VCS_REF: ${VCS_REF:-HEAD}
    image: trademasterx:${VERSION:-2.0.0}
    container_name: trademasterx-app
    restart: unless-stopped
    
    # Environment variables
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SECRET_KEY=${SECRET_KEY:-change-this-secret-key}
      - FLASK_HOST=0.0.0.0
      - FLASK_PORT=5000
      - DATABASE_URL=postgresql://trademasterx:${POSTGRES_PASSWORD:-secure_password}@postgres:5432/trademasterx
      - REDIS_URL=redis://redis:6379/0
      - REDIS_ENABLED=true
    
    # Port mapping
    ports:
      - "${WEB_PORT:-5000}:5000"
    
    # Volume mounts for persistent data
    volumes:
      - trademasterx_data:/app/data
      - trademasterx_logs:/app/logs
      - trademasterx_backups:/app/backups
      - ./config:/app/config:ro  # Read-only config mount
    
    # Dependencies
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Network
    networks:
      - trademasterx-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: trademasterx-postgres
    restart: unless-stopped
    
    environment:
      POSTGRES_DB: trademasterx
      POSTGRES_USER: trademasterx
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    
    # Volume for persistent database data
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U trademasterx -d trademasterx"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    # Network
    networks:
      - trademasterx-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: trademasterx-redis
    restart: unless-stopped
    
    # Configuration
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
    
    # Volume for persistent cache data
    volumes:
      - redis_data:/data
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    
    # Network
    networks:
      - trademasterx-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Prometheus Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: trademasterx-prometheus
    restart: unless-stopped
    profiles: ["monitoring"]
    
    # Configuration
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    
    networks:
      - trademasterx-network
    
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Grafana Dashboard (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: trademasterx-grafana
    restart: unless-stopped
    profiles: ["monitoring"]
    
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin_password}
      GF_SECURITY_ADMIN_USER: admin
    
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    depends_on:
      - prometheus
    
    networks:
      - trademasterx-network
    
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: trademasterx-nginx
    restart: unless-stopped
    profiles: ["nginx"]
    
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    
    depends_on:
      - trademasterx
    
    networks:
      - trademasterx-network
    
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  trademasterx-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  # Application data
  trademasterx_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data
  
  trademasterx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs
  
  trademasterx_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./backups
  
  # Database volumes
  postgres_data:
    driver: local
  
  redis_data:
    driver: local
  
  # Monitoring volumes
  prometheus_data:
    driver: local
  
  grafana_data:
    driver: local
  
  # Nginx logs
  nginx_logs:
    driver: local

# ============================================================================
# DEVELOPMENT OVERRIDE
# ============================================================================
# To use development configuration:
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

---
# docker-compose.dev.yml (Development override)
version: '3.8'

services:
  trademasterx:
    build:
      target: development
    
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - FLASK_DEBUG=true
      - LOG_LEVEL=DEBUG
    
    volumes:
      - .:/app:rw  # Mount source code for hot reload
      - trademasterx_data:/app/data
      - trademasterx_logs:/app/logs
    
    ports:
      - "5000:5000"
      - "8888:8888"  # Jupyter notebook
    
    command: ["/app/entrypoint.sh", "web"]
