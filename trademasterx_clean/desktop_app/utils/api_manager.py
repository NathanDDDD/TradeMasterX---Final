"""
API Key Manager Utility
Handles secure storage and retrieval of API keys
"""

import streamlit as st
import os
import json
from pathlib import Path
from typing import Optional, Dict, Any

class APIKeyManager:
    """Manages API keys for AI services"""
    
    def __init__(self):
        self.secrets_file = Path(__file__).parent.parent / ".streamlit" / "secrets.toml"
        self.env_file = Path(__file__).parent.parent.parent / ".env"
    
    def check_api_keys(self) -> bool:
        """Check if API keys are configured"""
        return self.has_openai_key() or self.has_claude_key()
    
    def has_openai_key(self) -> bool:
        """Check if OpenAI API key is available"""
        return bool(self.get_openai_key())
    
    def has_claude_key(self) -> bool:
        """Check if Claude API key is available"""
        return bool(self.get_claude_key())
    
    def get_openai_key(self) -> Optional[str]:
        """Get OpenAI API key"""
        # Try Streamlit secrets first
        try:
            return st.secrets.get("openai_api_key")
        except:
            pass
        
        # Try environment variable
        return os.getenv("OPENAI_API_KEY")
    
    def get_claude_key(self) -> Optional[str]:
        """Get Claude API key"""
        # Try Streamlit secrets first
        try:
            return st.secrets.get("claude_api_key")
        except:
            pass
        
        # Try environment variable
        return os.getenv("CLAUDE_API_KEY") or os.getenv("ANTHROPIC_API_KEY")
    
    def save_api_keys(self, openai_key: str = None, claude_key: str = None) -> bool:
        """Save API keys to Streamlit secrets"""
        try:
            # Ensure .streamlit directory exists
            self.secrets_file.parent.mkdir(exist_ok=True)
            
            # Load existing secrets
            secrets = {}
            if self.secrets_file.exists():
                try:
                    with open(self.secrets_file, 'r') as f:
                        content = f.read()
                        # Simple TOML parsing for our use case
                        for line in content.split('\n'):
                            if '=' in line and not line.strip().startswith('#'):
                                key, value = line.split('=', 1)
                                secrets[key.strip()] = value.strip().strip('"')
                except:
                    pass
            
            # Update with new keys
            if openai_key:
                secrets['openai_api_key'] = openai_key
            if claude_key:
                secrets['claude_api_key'] = claude_key
            
            # Write secrets file
            with open(self.secrets_file, 'w') as f:
                f.write("# Streamlit secrets file\n")
                f.write("# Generated by TradeMasterX GUI\n\n")
                
                for key, value in secrets.items():
                    f.write(f'{key} = "{value}"\n')
            
            # Also save to .env file for CLI compatibility
            self.save_to_env_file(openai_key, claude_key)
            
            return True
            
        except Exception as e:
            st.error(f"Failed to save API keys: {e}")
            return False
    
    def save_to_env_file(self, openai_key: str = None, claude_key: str = None):
        """Save API keys to .env file"""
        try:
            # Load existing .env content
            env_content = {}
            if self.env_file.exists():
                with open(self.env_file, 'r') as f:
                    for line in f:
                        if '=' in line and not line.strip().startswith('#'):
                            key, value = line.split('=', 1)
                            env_content[key.strip()] = value.strip()
            
            # Update with new keys
            if openai_key:
                env_content['OPENAI_API_KEY'] = openai_key
            if claude_key:
                env_content['CLAUDE_API_KEY'] = claude_key
                env_content['ANTHROPIC_API_KEY'] = claude_key  # Alternative name
            
            # Write .env file
            with open(self.env_file, 'w') as f:
                f.write("# TradeMasterX Environment Variables\n")
                f.write("# Generated by Desktop GUI\n\n")
                
                for key, value in env_content.items():
                    f.write(f"{key}={value}\n")
        
        except Exception as e:
            # Non-critical error
            pass
    
    def test_api_keys(self) -> Dict[str, bool]:
        """Test API keys validity"""
        results = {
            "openai": False,
            "claude": False
        }
        
        # Test OpenAI key
        openai_key = self.get_openai_key()
        if openai_key:
            try:
                import requests
                headers = {
                    "Authorization": f"Bearer {openai_key}",
                    "Content-Type": "application/json"
                }
                response = requests.get(
                    "https://api.openai.com/v1/models",
                    headers=headers,
                    timeout=10
                )
                results["openai"] = response.status_code == 200
            except:
                results["openai"] = False
        
        # Test Claude key
        claude_key = self.get_claude_key()
        if claude_key:
            try:
                import requests
                headers = {
                    "x-api-key": claude_key,
                    "Content-Type": "application/json",
                    "anthropic-version": "2023-06-01"
                }
                # Simple test request
                response = requests.post(
                    "https://api.anthropic.com/v1/messages",
                    headers=headers,
                    json={
                        "model": "claude-3-haiku-20240307",
                        "max_tokens": 10,
                        "messages": [{"role": "user", "content": "test"}]
                    },
                    timeout=10
                )
                results["claude"] = response.status_code in [200, 400]  # 400 is OK for test
            except:
                results["claude"] = False
        
        return results
    
    def clear_api_keys(self) -> bool:
        """Clear all stored API keys"""
        try:
            # Remove from secrets file
            if self.secrets_file.exists():
                self.secrets_file.unlink()
            
            # Remove from environment (for current session)
            for key in ["OPENAI_API_KEY", "CLAUDE_API_KEY", "ANTHROPIC_API_KEY"]:
                if key in os.environ:
                    del os.environ[key]
            
            return True
        except:
            return False
