#!/usr/bin/env python3
"""
TradeMasterX 2.0 - Project Structure Cleanup
Consolidates duplicate folders and organizes the project structure
"""

import shutil
import os
from pathlib import Path
import json

def cleanup_project_structure():
    """Clean up and organize the project structure"""
    print("üßπ TradeMasterX 2.0 Project Cleanup")
    print("=" * 50)
    
    # Create backup of current structure
    backup_dir = Path("backup_before_cleanup")
    if not backup_dir.exists():
        backup_dir.mkdir()
        print(f"üìÅ Created backup directory: {backup_dir}")
    
    # Define consolidation mappings
    consolidation_map = {
        # Consolidate core directories
        "core_clean": "trademasterx/core",
        "utils_clean": "trademasterx/utils",
        
        # Consolidate test directories
        "tests_clean": "tests",
        "test_logs": "logs/test_logs",
        "test_data": "data/test_data",
        "test_reports": "reports/test_reports",
        
        # Consolidate report directories
        "reports_clean": "reports",
        "logs_clean": "logs",
        
        # Consolidate demo directories
        "demo_logs": "logs/demo_logs",
        "demo_data": "data/demo_data",
    }
    
    # Create target directories
    target_dirs = [
        "tests",
        "logs",
        "data",
        "reports",
        "docs",
        "scripts"
    ]
    
    for dir_name in target_dirs:
        dir_path = Path(dir_name)
        if not dir_path.exists():
            dir_path.mkdir(parents=True, exist_ok=True)
            print(f"üìÅ Created directory: {dir_name}")
    
    # Consolidate directories
    for source, target in consolidation_map.items():
        source_path = Path(source)
        target_path = Path(target)
        
        if source_path.exists():
            print(f"üîÑ Consolidating {source} -> {target}")
            
            # Create target directory if it doesn't exist
            target_path.mkdir(parents=True, exist_ok=True)
            
            # Move files from source to target
            for item in source_path.iterdir():
                if item.is_file():
                    target_file = target_path / item.name
                    if target_file.exists():
                        # Handle conflicts by adding suffix
                        base_name = item.stem
                        extension = item.suffix
                        counter = 1
                        while target_file.exists():
                            target_file = target_path / f"{base_name}_{counter}{extension}"
                            counter += 1
                    
                    shutil.move(str(item), str(target_file))
                    print(f"  üìÑ Moved: {item.name}")
                elif item.is_dir():
                    target_dir = target_path / item.name
                    if target_dir.exists():
                        # Handle conflicts by adding suffix
                        base_name = item.name
                        counter = 1
                        while target_dir.exists():
                            target_dir = target_path / f"{base_name}_{counter}"
                            counter += 1
                    
                    shutil.move(str(item), str(target_dir))
                    print(f"  üìÅ Moved: {item.name}/")
            
            # Remove empty source directory
            if source_path.exists() and not any(source_path.iterdir()):
                source_path.rmdir()
                print(f"  üóëÔ∏è Removed empty directory: {source}")
    
    # Remove or consolidate duplicate files
    duplicate_files = [
        "quick_test.py",  # Already removed
        "test_clean_assistant.py",  # Already removed
        "test_results.txt",  # Already removed
    ]
    
    for file_name in duplicate_files:
        file_path = Path(file_name)
        if file_path.exists():
            file_path.unlink()
            print(f"üóëÔ∏è Removed duplicate file: {file_name}")
    
    # Create a unified requirements file
    requirements_files = [
        "requirements.txt",
        "requirements_new.txt",
        "trademasterx/requirements.txt"
    ]
    
    all_requirements = set()
    for req_file in requirements_files:
        req_path = Path(req_file)
        if req_path.exists():
            with open(req_path, 'r') as f:
                lines = f.readlines()
                for line in lines:
                    line = line.strip()
                    if line and not line.startswith('#'):
                        all_requirements.add(line)
    
    # Write unified requirements
    with open("requirements.txt", 'w') as f:
        f.write("# TradeMasterX 2.0 - Unified Requirements\n")
        f.write("# Generated by cleanup script\n\n")
        for req in sorted(all_requirements):
            f.write(f"{req}\n")
    
    print("üìÑ Created unified requirements.txt")
    
    # Create project structure documentation
    structure_doc = {
        "project_structure": {
            "trademasterx/": {
                "description": "Main package directory",
                "subdirectories": {
                    "ai/": "AI orchestration and agents",
                    "bots/": "Trading bot implementations",
                    "config/": "Configuration management",
                    "core/": "Core system components",
                    "data/": "Data storage and management",
                    "interface/": "User interfaces",
                    "launch/": "Launch scripts",
                    "optimizers/": "Optimization algorithms",
                    "reports/": "Performance reports"
                }
            },
            "tests/": "Test suites and test data",
            "logs/": "Application logs and debugging",
            "data/": "Data storage and caching",
            "reports/": "Performance reports and analytics",
            "docs/": "Documentation",
            "scripts/": "Utility scripts",
            "desktop_app/": "Desktop GUI application",
            "flask-app/": "Flask web application template"
        }
    }
    
    with open("docs/project_structure.json", 'w') as f:
        json.dump(structure_doc, f, indent=2)
    
    print("üìÑ Created project structure documentation")
    
    # Create a simple launcher script
    launcher_script = '''#!/usr/bin/env python3
"""
TradeMasterX 2.0 - Unified Launcher
Simple launcher for all TradeMasterX components
"""

import sys
import subprocess
from pathlib import Path

def main():
    """Main launcher function"""
    print(" TradeMasterX 2.0 Launcher")
    print("=" * 30)
    print("1. Main Application")
    print("2. Desktop GUI")
    print("3. Web Dashboard")
    print("4. Run Tests")
    print("5. Exit")
    
    choice = input("\\nSelect option (1-5): ").strip()
    
    if choice == "1":
        subprocess.run([sys.executable, "main_app.py"])
    elif choice == "2":
        subprocess.run([sys.executable, "-m", "streamlit", "run", "desktop_app/app.py"])
    elif choice == "3":
        subprocess.run([sys.executable, "simple_dashboard.py"])
    elif choice == "4":
        subprocess.run([sys.executable, "run_tests.py"])
    elif choice == "5":
        print("Goodbye!")
    else:
        print("Invalid choice!")

if __name__ == "__main__":
    main()
'''
    
    with open("launch_trademasterx.py", 'w') as f:
        f.write(launcher_script)
    
    print("üìÑ Created unified launcher script")
    
    print("\n‚úÖ Project cleanup completed!")
    print("\nüìã Summary of changes:")
    print("- Consolidated duplicate directories")
    print("- Created unified requirements.txt")
    print("- Organized project structure")
    print("- Created documentation")
    print("- Added unified launcher")

if __name__ == "__main__":
    cleanup_project_structure() 